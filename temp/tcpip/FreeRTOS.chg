%-
%define! beanName FreeRTOS
%set DeviceName ReqValue $=CLEAR-ALL=$
%include ..\Beans\_SDK\SdkCommonV2.chg
%-
%-
%-  %ifdef SdkVersionValue_os_FreeRTOS
%-    %- Help
%-    %:dummy=%setVariable(PEx_ActiveHelpSubDir,Items\%'SdkVersionValue_os_FreeRTOS')
%-    %-
%-    %- properties
%-    %- inclSUB sdk_includeItem(%beanName,VersionSpecificItem,%'beanName'_main.item,%'SdkVersionValue_os_FreeRTOS')
%-    %-
%-    %- Methods
%-    %- inclSUB sdk_includeItem(%beanName,SdkSpecificMethods,%'beanName'_methods.item,%'SdkVersionValue_os_FreeRTOS')
%-    %-
%-    %- include methods chg
%-    %include ..\Beans\%'beanName'\%'beanName'_croutine_methods.chg
%-    %include ..\Beans\%'beanName'\%'beanName'_event_methods.chg
%-    %include ..\Beans\%'beanName'\%'beanName'_queue_methods.chg
%-    %include ..\Beans\%'beanName'\%'beanName'_sem_mutex_methods.chg
%-    %include ..\Beans\%'beanName'\%'beanName'_sw_timers_methods.chg
%-    %include ..\Beans\%'beanName'\%'beanName'_task_methods.chg
%-    %-
%-  %else
%-    %error Unknown %'beanName' SDK version.
%-    %if defined(PE_DEBUG)
%-      %error! Symbol SdkVersionValue_os_FreeRTOS does not exist!
%-    %endif
%-  %endif
%-
%-
%-==============================================================================
%- Definition of the global PEx component variable RtosComponent
%-==============================================================================
%if (defined(PEversionDecimal) && (PEversionDecimal >=0 '1282'))
  %:dummy=%setVariable(RtosComponent,true)
  %undef! dummy
%endif  %-- (defined(PEversionDecimal) && (PEversionDecimal >=0 '1282'))
%-
%set DeviceName Text FreeRTOS
%set DeviceName ReadOnly True
%- Set FreeRTOS version
%define FreertosVersionPath %'SdkSourceFilesDirectory'\rtos\%'FreeRTOS_folder'\Source\include\task.h
%launchExt ..\_SDK\FileParser.class, parseCDefine, %'FreertosVersionPath'>>>FreeRtosVersion>>>tskKERNEL_VERSION_NUMBER
%- Set component API version
%if %get(CompVersion,Exists?) = 'yes'
  %set CompVersion Value %'FreeRTOS_SdkVersionValue'
%endif
%-
%- RTOS component can be used only as inherited component by fsl_os_abstraction.
%if (defined(DeviceName) & (defined(UsedByOsAbstractionComponent) & %get(UsedByOsAbstractionComponent,Bool) = 'no') & (%get(Period,Exists?) = 'yes' & %get(Period, IsError) = 'no'))
  %set DeviceName Error Standalone usage of FreeRTOS component in the project is not allowed. To select the RTOS type please use the 'OS' property in the 'fsl_os_abstraction' component.
%endif
%-
%ifdef SdkSourceFilesDirectory
  %set FreeRTOSFileDirectory Value %SdkSourceFilesDirectory\rtos\%'FreeRTOS_folder'\
  %set FreeRTOSFileDirectory ReadOnly yes
%else
  %set FreeRTOSFileDirectory ReadOnly no
%endif
%if defined(SdkSourceFilesDirectory)
  %setVariable(PEx_ActiveDoxygenHelpSubDir,%SdkSourceFilesDirectory/doc/html/group__free_r_t_o_s.html)
%endif
%-
%- Set timer device/counter
%- %if %get(PeriphDevice,Value) = 'SysTick'
%-    %set PeriodDevice Value SYST_RVR
%-    %set Counter Value SYST_CVR
%- %elif %get(PeriphDevice,Value) = 'LPTMR0'
%-   %set PeriodDevice Value %get(PeriphDevice,Value)_CMR
%-   %set Counter Value %get(PeriphDevice,Value)_CNR
%- %else
%-   %error^ Undefined timer device!
%- %endif
%-
%- Configuration CPU family property according selected MCU
%define! FamilyReqValDescription This property is automatically configured according selected CPU
%if %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M0P) = 'yes'
  %set configCPU_FAMILY ReqValue Cortex M0+=%'FamilyReqValDescription'
  %set configKERNEL_INTERRUPT_PRIORITY ReqValue D:3=%'FamilyReqValDescription'
  %if %get(configMAX_SYSCALL_INTERRUPT_PRIORITY,Value) >0 '3'
    %set configMAX_SYSCALL_INTERRUPT_PRIORITY Error Value is above admissible range. Maximum value for selected CPU is 3.
  %endif
%elif %CPUDB_prph_has_feature(CPU,HasDevice_SIUL2) = 'yes'
    %set configCPU_FAMILY ReqValue E200=%'FamilyReqValDescription'
    %set configKERNEL_INTERRUPT_PRIORITY ReadOnly true
%elif %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M4) = 'yes'
  %set configKERNEL_INTERRUPT_PRIORITY ReqValue D:15=%'FamilyReqValDescription'
  %- [PEXMCU-3718] - fixed distinguishing between M4 core with and without FPU.
  %if %CPUDB_prph_has_feature(CPU, FPU) = 'yes'
    %set configCPU_FAMILY ReqValue Cortex M4F=%'FamilyReqValDescription'
  %else
    %set configCPU_FAMILY ReqValue Cortex M4=%'FamilyReqValDescription'
  %endif
%elif %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M7) = 'yes'
  %set configKERNEL_INTERRUPT_PRIORITY ReqValue D:15=%'FamilyReqValDescription'
  %set configCPU_FAMILY ReqValue Cortex M7=%'FamilyReqValDescription'
%else
  %error^ Unsupported MCU core!
%endif
%-
%- set "Tick rate [in Hz] from "Kernel notification" timing property
%if %get(Period,Exists?) = 'yes' & %get(Period,IsEnabled) = 'yes' & %get(Period,IsError) = 'no'
  %define! TimerStr %get(Period,Value)
  %:TimerTickRateHz = 200
  %- Time
  %if (%str_pos("sec",TimerStr) != '0')
    %:TimerTickRateHz = %round(%EXPR(1 / %str_replace(TimerStr," sec","")))
  %elif (%str_pos("ms",TimerStr) != '0')
    %:TimerTickRateHz = %round(%EXPR(1000 / %str_replace(TimerStr," ms","")))
  %elif (%str_pos("�s",TimerStr) != '0')
    %:TimerTickRateHz = %round(%EXPR(1000000 / %str_replace(TimerStr," �s","")))
  %- Frequency
  %elif (%str_pos(" Hz",TimerStr) != '0')
    %:TimerTickRateHz = %round(%str_replace(TimerStr," Hz",""))
  %elif (%str_pos("kHz",TimerStr) != '0')
    %:TimerTickRateHz = %round(%EXPR(%str_replace(TimerStr," kHz","") * 1000))
  %elif (%str_pos("MHz",TimerStr) != '0')
    %:TimerTickRateHz = %round(%EXPR(%str_replace(TimerStr," MHz","") * 1000000))
  %endif
  %set configTICK_RATE_HZ ReqValue D:%'TimerTickRateHz'=Value is set by "Kernel notification" property.
%endif
%-
%-  %if %get(@_CPU_@LinkClockMan, Exists?) = 'yes' & %get(@_CPU_@LinkClockMan, IsEnabled) = 'yes'
%-    %define! TimingProperyLink _CPU_@LinkClockMan
%-    %if %get(@%'TimingProperyLink'@SpeedModeList, Exists?) = 'yes'
%-      %for ClockConfigIdx from [0..%get(@%'TimingProperyLink'@SpeedModeList, MaxItem)]
%-        %if %get(@%'TimingProperyLink'@InitClockConfigSel,Exists?) = 'yes' & %get(@%'TimingProperyLink'@CLKModeNameSpeedMode%'ClockConfigIdx',Exists?) = 'yes'
%-          %define! InitClockConfigSel %get(@%'TimingProperyLink'@InitClockConfigSel,Value)
%-          %if (%'InitClockConfigSel' = %get(@%'TimingProperyLink'@CLKModeNameSpeedMode%'ClockConfigIdx',Value))
%-            %if %get(@%'TimingProperyLink'@CoreClockSpeedMode%'ClockConfigIdx',Exists?) = 'yes' & %get(@%'TimingProperyLink'@BusClockSpeedMode%'ClockConfigIdx',Exists?) = 'yes'
%-              %set configCPU_CLOCK_HZ ReqValue D:%round(%EXPR(%get(@%'TimingProperyLink'@CoreClockSpeedMode%'ClockConfigIdx',Value) * 1000000))=Initialization value of 'Core clock' frequency (specified in clock_manager component).
%-              %set configBUS_CLOCK_HZ ReqValue D:%round(%EXPR(%get(@%'TimingProperyLink'@BusClockSpeedMode%'ClockConfigIdx',Value) * 1000000))=Initialization value of 'Bus clock' frequency (specified in clock_manager component)..
%-            %endif
%-          %endif
%-        %endif
%-      %endfor
%-    %endif
%-  %endif
%- %if %defined(Link1)
%-     %if %configCPU_CLOCK_HZ != %EXPR(%getVariable(@%'Link1'@RUN_CORE_CLOCK0,''))
%-       %set configCPU_CLOCK_HZ Warning CPU CORE CLOCK value is different from the one set in clock manager
%-   %endif
%-   %if %configBUS_CLOCK_HZ != %EXPR(%getVariable(@%'Link1'@RUN_BUS_CLOCK0,''))
%-     %set configBUS_CLOCK_HZ Warning CPU BUS CLOCK value is different from the one set in clock manager
%-   %endif
%- %endif
%- %-
 %if %defined(Link1)
%-   %if %configCPU_CLOCK_HZ == '48000000'
     %set configCPU_CLOCK_HZ Value 40000000 %-- %EXPR(%getVariable(@%'Link1'@RUN_CORE_CLOCK0,''))
%-   %endif
 %endif
%- %-
%if %defined(Link1)
%-  %if %configBUS_CLOCK_HZ == '24000000'
    %set configBUS_CLOCK_HZ Value 24000000 %--%EXPR(%getVariable(@%'Link1'@RUN_BUS_CLOCK0,''))
%-  %endif
%endif
%-
%- if Memory scheme = Malloc, FreeRTOS uses malloc()/free() function => HeapSize must be > 0
%-  %if %get(configFRTOS_MEMORY_SCHEME,Exists?) = 'yes' && %get(configFRTOS_MEMORY_SCHEME,Value) == '3'
%-    %if ((%get(@_CPU_@C_HeapSize,Exists?) = 'yes') && (%get(@_CPU_@C_HeapSize,Value) =0 '0'))
%-      %set configFRTOS_MEMORY_SCHEME Warning "Malloc" memory scheme uses malloc()/free() functions, Heap size must be greater than 0 (Heap size property on Cpu component, Build options tab).
%-    %endif
%-  %endif
%-
%- Software TIMER management
%- configTIMER_TASK_PRIORITY = (configMAX_PRIORITIES - 1)
%define! tmpMaxPriorities %get(configMAX_PRIORITIES,Value)
%if %get(configTIMER_TASK_PRIORITY,Value) >= %tmpMaxPriorities
  %set configTIMER_TASK_PRIORITY Warning "Timer task priority" is greater than "Max. number of task priorities".
%endif
%-
%-  %- Checks in event_groups.c file
%-  %if %get(INCLUDE_xEventGroupSetBitFromISR,Bool) = 'yes' && %get(configUSE_TIMERS,Bool) = 'no'
%-      %set INCLUDE_xEventGroupSetBitFromISR Error Software timer functionality must be enabled to make the xEventGroupSetBitFromISR() function available.
%-  %endif
%-  %if %get(INCLUDE_xEventGroupSetBitFromISR,Bool) = 'yes' && %get(INCLUDE_xTimerPendFunctionCall,Bool) = 'no'
%-    %set INCLUDE_xTimerPendFunctionCall Error xTimerPendFunctionCall() must be enabled to make the xEventGroupSetBitFromISR() function available.
%-  %endif
%-
%-  %- Checks in task.c file
%-  %if %get(configUSE_TICKLESS_IDLE,Bool) = 'yes' && %get(INCLUDE_vTaskSuspend,Bool) = 'no'
%-    %set INCLUDE_vTaskSuspend Error vTaskSuspend() must be enabled if configUSE_TICKLESS_IDLE is not set to 0.
%-  %endif
%if %get(configGENERATE_RUN_TIME_STATS,Bool) = 'yes' && %get(configUSE_STATS_FORMATTING_FUNCTIONS,Bool) = 'yes' && %get(configUSE_TRACE_FACILITY,Bool) = 'no'
  %set configUSE_TRACE_FACILITY Error Visualization and tracing must be enabled to use vTaskGetRunTimeStats().
%endif
%-  %- Checks in timers.c file
%-  %if %get(INCLUDE_xTimerPendFunctionCall,Bool) = 'yes' && %get(configUSE_TIMERS,Bool) = 'no'
%-    %set configUSE_TIMERS Error "Software timers" must be enabled  to 1 to make the xTimerPendFunctionCall() function available.
%-  %endif
%-
%- Checking configEXPECTED_IDLE_TIME_BEFORE_SLEEP value -> max. 65535 value for configUSE_16_BIT_TICKS = 1
%if %get(configUSE_16_BIT_TICKS,Exists?) = 'yes' && %get(configEXPECTED_IDLE_TIME_BEFORE_SLEEP,Exists?) = 'yes'
  %if %get(configUSE_16_BIT_TICKS,Bool) = 'yes' && %get(configEXPECTED_IDLE_TIME_BEFORE_SLEEP,Value) >0 '65535'
    %set configEXPECTED_IDLE_TIME_BEFORE_SLEEP Error Idle time value is above 65535 (property "Use 16 bit ticks" is enabled).
    %set configUSE_16_BIT_TICKS Error Idle time before sleep value is above 16bit range (65535 value).
  %endif
%endif
%-
%-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%-   Globals symbols for *.ts2 checking
%-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%-
%- Create 'FreeRTOS_configMAX_PRIORITIES' variable for script in *.ts2 files.
%if defined(configMAX_PRIORITIES)
  %:dummy=%setVariable(FreeRTOS_configMAX_PRIORITIES,%get(configMAX_PRIORITIES,Value))
%endif
%-
%- Create 'configFRTOS_MEMORY_SCHEME' variable for script in *.ts2 files.
%if %get(configFRTOS_MEMORY_SCHEME,Exists?) = 'yes'
  %:dummy=%setVariable(configFRTOS_MEMORY_SCHEME,%get(configFRTOS_MEMORY_SCHEME,Value))
%endif
%-
%- Inherited component settings
%------------------------------------------------------------------------------
%define! ReqValueReason Driven by uCOSIII component
%SUBROUTINE SetPropertyByReqValue(_SymbolName, _State)
  %if (%get(%_SymbolName,Exists?) = 'yes' & %get(%_SymbolName,IsEnabled) = 'yes')
    %set %'_SymbolName' ReqValue %'_State'=%ReqValueReason
  %endif
%SUBROUTINE_END
%- For a new project, components are initialized from RtosTask
%if %defined(BeanInitialization)
  %set ComponentsInitializedFromTaskGrp Value Enabled
%endif
%- OS_Task component => defines rtos_main_task() function for initialization PEx component.
%ifdef InhrSymbolList
  %if %get(OS_Task,Exists?) = 'yes' & %get_index1(OS_Task, InhrSymbolList) >. '0'
    %-if %defined(BeanInitialization)
    %set @OS_Task@DeviceName Text MainTask
    %set @OS_Task@DeviceName ReadOnly yes
    %set @OS_Task@EventModule Text rtos_main_task
    %set @OS_Task@EventModule ReadOnly yes
    %-endif
    %inclSUB SetPropertyByReqValue(@OS_Task@TaskEntryFunction,main_task)
    %inclSUB SetPropertyByReqValue(@OS_Task@TaskCode,generate code)
    %inclSUB SetPropertyByReqValue(@OS_Task@AutoInitialization,Enabled)
    %-
    %inclSUB SetPropertyByReqValue(@OS_Task@CallingComponents_InitFunction,Enabled)
    %- initialization Task priority according selected RTOS
    %if %get(@OS_Task@IsPriorityInitialized,Exists?) = 'yes' & %get(@OS_Task@IsPriorityInitialized,Bool) = 'no'
      %set @OS_Task@IsPriorityInitialized Value yes
      %set @OS_Task@TaskPriority Value %EXPR(%get(configMAX_PRIORITIES,Value) - 2)
    %endif
  %endif
%endif
%-
%- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%- xxxxxxxx FreeRTOS API vs. OSA properties management xxxxxx
%- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%SUBROUTINE CheckApiVsOsaProperties(_SymbolName,_Message)
  %if %get(%_SymbolName,Exists?) = 'yes' & %get(%_SymbolName,Bool) = 'no'
    %set %_SymbolName Warning %_Message
  %endif
%SUBROUTINE_END
%-
%inclSUB CheckApiVsOsaProperties(INCLUDE_vTaskPrioritySet,This function is used by OSA driver (in OSA_TaskSetPriority() function).)
%inclSUB CheckApiVsOsaProperties(INCLUDE_uxTaskPriorityGet,This function is used by OSA driver (in OSA_TaskGetPriority() function).)
%inclSUB CheckApiVsOsaProperties(INCLUDE_vTaskDelete,This function is used by OSA driver (in OSA_TaskDestroy() function).)
%inclSUB CheckApiVsOsaProperties(INCLUDE_vTaskDelay,This function is used by OSA driver (in OSA_TimeDelay() function).)
%inclSUB CheckApiVsOsaProperties(INCLUDE_xTaskGetCurrentTaskHandle,This function is used by OSA driver (in OSA_TaskGetHandler() function).)
%-
%- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%- xxxxxxxxxxxx FreeRTOS methods management xxxxxxxxxxxxxxxxx
%- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%SUBROUTINE SetMethodByBoolProperties(_MethodName,_SymbolName0,_SymbolName1)
  %if %_SymbolName1 = ''
    %define! SetMethodReqValueReason The settings is specified by "%'_SymbolName0'" property
    %if defined(%'_SymbolName0') && %get(%'_SymbolName0', Bool) = 'yes'
      %set %_MethodName ReqValue generate code=%SetMethodReqValueReason
    %else
      %set %_MethodName ReqValue don't generate code=%SetMethodReqValueReason
    %endif
  %else
    %define! ReqValueReason The settings is specified by "%'_SymbolName0'" and "%'_SymbolName1'" properties
    %if ((defined(%_SymbolName0) && %get(%_SymbolName0, Bool) = 'yes') && (defined(%_SymbolName1) && %get(%_SymbolName1, Bool) = 'yes'))
      %set %_MethodName ReqValue generate code=%ReqValueReason
    %else
      %set %_MethodName ReqValue don't generate code=%ReqValueReason
    %endif
  %endif
%SUBROUTINE_END
%-
%- Software timers methods management
%inclSUB SetMethodByBoolProperties(xTimerChangePeriod,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerChangePeriodFromISR,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerCreate,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerDelete,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerGetTimerDaemonTaskHandle,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(pvTimerGetTimerID,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(pcTimerGetTimerName,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerIsTimerActive,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerPendFunctionCall,INCLUDE_xTimerPendFunctionCall,)
%inclSUB SetMethodByBoolProperties(xTimerPendFunctionCallFromISR,INCLUDE_xEventGroupSetBitFromISR,)
%inclSUB SetMethodByBoolProperties(xTimerReset,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerResetFromISR,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerStart,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerStartFromISR,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerStop,configUSE_TIMERS,)
%inclSUB SetMethodByBoolProperties(xTimerStopFromISR,configUSE_TIMERS,)
%-
%- Task methods management
%inclSUB SetMethodByBoolProperties(vTaskPrioritySet,INCLUDE_vTaskPrioritySet,)
%inclSUB SetMethodByBoolProperties(uxTaskPriorityGet,INCLUDE_uxTaskPriorityGet,)
%inclSUB SetMethodByBoolProperties(vTaskDelete,INCLUDE_vTaskDelete,)
%inclSUB SetMethodByBoolProperties(vTaskSuspend,INCLUDE_vTaskSuspend,)
%inclSUB SetMethodByBoolProperties(vTaskDelayUntil,INCLUDE_vTaskDelayUntil,)
%inclSUB SetMethodByBoolProperties(vTaskDelay,INCLUDE_vTaskDelay,)
%inclSUB SetMethodByBoolProperties(uxTaskGetStackHighWaterMark,INCLUDE_uxTaskGetStackHighWaterMark,)
%inclSUB SetMethodByBoolProperties(xTaskGetSchedulerState,INCLUDE_xTaskGetSchedulerState,)
%inclSUB SetMethodByBoolProperties(xTaskGetCurrentTaskHandle,INCLUDE_xTaskGetCurrentTaskHandle,)
%inclSUB SetMethodByBoolProperties(xTaskGetIdleTaskHandle,INCLUDE_xTaskGetIdleTaskHandle,)
%inclSUB SetMethodByBoolProperties(eTaskGetState,INCLUDE_eTaskGetState,)
%inclSUB SetMethodByBoolProperties(pcTaskGetTaskName,INCLUDE_pcTaskGetTaskName,)
%inclSUB SetMethodByBoolProperties(vTaskSetApplicationTaskTag,configUSE_APPLICATION_TASK_TAG,)
%- Semafore & mutex methods management
%inclSUB SetMethodByBoolProperties(xSemaphoreGetMutexHolder,configUSE_MUTEXES,INCLUDE_xQueueGetMutexHolder)
%-
%- inclSUB SetMethodByBoolProperties(xEventGroupSetBitFromISR,INCLUDE_xEventGroupSetBitFromISR,)
%- inclSUB SetMethodByBoolProperties(xTimerPendFunctionCall,INCLUDE_xTimerPendFunctionCall,)
%-
%- Events management
%inclSUB SetMethodByBoolProperties(vApplicationIdleHook,configUSE_IDLE_HOOK,)
%inclSUB SetMethodByBoolProperties(vApplicationTickHook,configUSE_TICK_HOOK,)
%-  %inclSUB SetMethodByBoolProperties(vApplicationStackOverflowHook,configCHECK_FOR_STACK_OVERFLOW,)
%:dummy=%setVariable(vApplicationStackOverflowHook,%get(configCHECK_FOR_STACK_OVERFLOW,Value))
%inclSUB SetMethodByBoolProperties(vApplicationMallocFailedHook,configUSE_MALLOC_FAILED_HOOK,)
