<?xml version="1.0" encoding="UTF-8"?>
<ListItem>
  <TInPEinvisibleGroup>
    <Name>enetgroup</Name>
    <Symbol>enetgroup</Symbol>
    <Hint>Group of methods/events included into the bean.</Hint>
    <ItemLevel>BASIC</ItemLevel>
    <BoldName>true</BoldName>
    <EditLine>false</EditLine>
    <Description/>
    <Expanded>Always</Expanded>
    <Children>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_GetDefaultConfig</Name>
          <Symbol>ENET_DRV_GetDefaultConfig</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Gets the default configuration structure.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>1</ParamCount>
          <Parameter>
            <ParName>config</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The configuration structure</ParHint>
            <ParUserDeclaration>enet_config_t * config</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(enet_config_t * config)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_Init</Name>
          <Symbol>ENET_DRV_Init</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Initializes the ENET module.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>5</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>state</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Pointer to the state structure which will be used for holding the internal state of the driver.</ParHint>
            <ParUserDeclaration>enet_state_t * state</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>config</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The module configuration structure</ParHint>
            <ParUserDeclaration>const enet_config_t * config</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>bufferConfig</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The buffer descriptors configuration structure</ParHint>
            <ParUserDeclaration>const enet_buffer_config_t * bufferConfig</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>macAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The physical address of the MAC</ParHint>
            <ParUserDeclaration>const uint8_t * macAddr</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,enet_state_t * state,const enet_config_t * config,const enet_buffer_config_t * bufferConfig,const uint8_t * macAddr)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_Deinit</Name>
          <Symbol>ENET_DRV_Deinit</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Deinitializes the ENET module.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>1</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_ReadFrame</Name>
          <Symbol>ENET_DRV_ReadFrame</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Reads a received Ethernet frame.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>status_t</ReturnType>
          <RetHint>STATUS_SUCCESS if a frame was successfully read, STATUS_ENET_RX_QUEUE_EMPTY if there is no available frame in the queue.</RetHint>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>buff</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The buffer containing the frame</ParHint>
            <ParUserDeclaration>enet_buffer_t * buff</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>status_t #C#(uint8_t instance,enet_buffer_t * buff)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_ProvideRxBuff</Name>
          <Symbol>ENET_DRV_ProvideRxBuff</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Provides a receive buffer to be used by the driver for reception.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>buff</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The buffer to be added to the reception ring</ParHint>
            <ParUserDeclaration>enet_buffer_t * buff</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,enet_buffer_t * buff)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_SendFrame</Name>
          <Symbol>ENET_DRV_SendFrame</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Sends an Ethernet frame.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>status_t</ReturnType>
          <RetHint>STATUS_SUCCESS if the frame was successfully enqueued for transmission, STATUS_ENET_TX_QUEUE_FULL if there is no available space for the frame in the queue.</RetHint>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>buff</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The buffer containing the frame</ParHint>
            <ParUserDeclaration>const enet_buffer_t * buff</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>status_t #C#(uint8_t instance,const enet_buffer_t * buff)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_GetTransmitStatus</Name>
          <Symbol>ENET_DRV_GetTransmitStatus</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Checks if the transmission of a buffer is complete.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>status_t</ReturnType>
          <RetHint>STATUS_BUSY if the frame is still enqueued for transmission, STATUS_SUCCESS otherwise.</RetHint>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>buff</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The transmit buffer for which the status shall be checked</ParHint>
            <ParUserDeclaration>const enet_buffer_t * buff</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>status_t #C#(uint8_t instance,const enet_buffer_t * buff)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_EnableMDIO</Name>
          <Symbol>ENET_DRV_EnableMDIO</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Enables the MDIO interface.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>miiPreambleDisabled</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Enables/disables prepending a preamble to the MII management frame.</ParHint>
            <ParUserDeclaration>bool miiPreambleDisabled</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,bool miiPreambleDisabled)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_MDIORead</Name>
          <Symbol>ENET_DRV_MDIORead</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Reads the selected register of the PHY.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>status_t</ReturnType>
          <RetHint/>
          <ParamCount>5</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>phyAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>PHY device address</ParHint>
            <ParUserDeclaration>uint8_t phyAddr</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>phyReg</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>PHY register address</ParHint>
            <ParUserDeclaration>uint8_t phyReg</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>data</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Data read from the PHY</ParHint>
            <ParUserDeclaration>uint16_t * data</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>timeoutMs</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Timeout for the read operation (in milliseconds)</ParHint>
            <ParUserDeclaration>uint32_t timeoutMs</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>status_t #C#(uint8_t instance,uint8_t phyAddr,uint8_t phyReg,uint16_t * data,uint32_t timeoutMs)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_MDIOWrite</Name>
          <Symbol>ENET_DRV_MDIOWrite</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Writes the selected register of the PHY.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>status_t</ReturnType>
          <RetHint/>
          <ParamCount>5</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>phyAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>PHY device address</ParHint>
            <ParUserDeclaration>uint8_t phyAddr</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>phyReg</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>PHY register address</ParHint>
            <ParUserDeclaration>uint8_t phyReg</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>data</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Data to be written in the specified register of the PHY</ParHint>
            <ParUserDeclaration>uint16_t data</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>timeoutMs</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Timeout for the write operation (in milliseconds)</ParHint>
            <ParUserDeclaration>uint32_t timeoutMs</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>status_t #C#(uint8_t instance,uint8_t phyAddr,uint8_t phyReg,uint16_t data,uint32_t timeoutMs)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_SetMacAddr</Name>
          <Symbol>ENET_DRV_SetMacAddr</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Configures the physical address of the MAC.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>macAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The MAC address to be configured</ParHint>
            <ParUserDeclaration>const uint8_t * macAddr</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,const uint8_t * macAddr)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_GetMacAddr</Name>
          <Symbol>ENET_DRV_GetMacAddr</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Gets the physical address of the MAC.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>macAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The physical address of the MAC</ParHint>
            <ParUserDeclaration>uint8_t * macAddr</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,uint8_t * macAddr)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_SetUnicastForward</Name>
          <Symbol>ENET_DRV_SetUnicastForward</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Enables/Disables forwarding of unicast traffic having a specific MAC address as destination.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>3</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>macAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The physical address</ParHint>
            <ParUserDeclaration>const uint8_t * macAddr</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>enable</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>If true, the application will receive all the unicast traffic having as destination address the provided MAC address; if false, stop forwarding this kind of traffic</ParHint>
            <ParUserDeclaration>bool enable</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,const uint8_t * macAddr,bool enable)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_SetMulticastForward</Name>
          <Symbol>ENET_DRV_SetMulticastForward</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Enables/Disables forwarding of multicast traffic having a specific MAC address as destination.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>3</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>macAddr</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The physical address</ParHint>
            <ParUserDeclaration>const uint8_t * macAddr</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>enable</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>If true, the application will receive all the multicast traffic having as destination address the provided MAC address; if false, stop forwarding this kind of traffic</ParHint>
            <ParUserDeclaration>bool enable</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,const uint8_t * macAddr,bool enable)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_SetMulticastForwardAll</Name>
          <Symbol>ENET_DRV_SetMulticastForwardAll</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Enables/Disables forwarding of the multicast traffic, irrespective of the destination MAC address.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>enable</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>If true, the application will receive all the multicast traffic; if false, stop forwarding this kind of traffic</ParHint>
            <ParUserDeclaration>bool enable</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,bool enable)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_SetSleepMode</Name>
          <Symbol>ENET_DRV_SetSleepMode</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Sets the MAC in sleep mode or normal mode.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>enable</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>If true, set MAC in sleep mode; if false, set MAC in normal mode</ParHint>
            <ParUserDeclaration>bool enable</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,bool enable)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_ConfigCounters</Name>
          <Symbol>ENET_DRV_ConfigCounters</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Enables/Disables the MIB counters.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>void</ReturnType>
          <RetHint/>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>enable</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Enable/Disable MIB counters</ParHint>
            <ParUserDeclaration>bool enable</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>void #C#(uint8_t instance,bool enable)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
      <GrupItem>
        <TMthdItem>
          <Name>ENET_DRV_GetCounter</Name>
          <Symbol>ENET_DRV_GetCounter</Symbol>
          <TypeSpec>typeMethod</TypeSpec>
          <Hint>Gets statistics from the specified counter.</Hint>
          <ItemLevel>BASIC</ItemLevel>
          <ReadOnly>true</ReadOnly>
          <EditLine>false</EditLine>
          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
          <DefaultIndex>0</DefaultIndex>
          <TextValueIndex>true</TextValueIndex>
          <RuntimeProperty>false</RuntimeProperty>
          <CanDelete>false</CanDelete>
          <IconPopup>false</IconPopup>
          <DefaultValue>true</DefaultValue>
          <Popup>false</Popup>
          <PublicMethod>true</PublicMethod>
          <IsAssembler>false</IsAssembler>
          <InDefinition>true</InDefinition>
          <ReturnType>uint32_t</ReturnType>
          <RetHint>The value of the requested counter</RetHint>
          <ParamCount>2</ParamCount>
          <Parameter>
            <ParName>instance</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>Instance number</ParHint>
            <ParUserDeclaration>uint8_t instance</ParUserDeclaration>
          </Parameter>
          <Parameter>
            <ParName>counter</ParName>
            <ParType>void</ParType>
            <ParPassing>Value</ParPassing>
            <ParHint>The counter to be read</ParHint>
            <ParUserDeclaration>enet_counter_t counter</ParUserDeclaration>
          </Parameter>
          <Scope>PRIVATE</Scope>
          <Declarations>
            <ANSIC>uint32_t #C#(uint8_t instance,enet_counter_t counter)</ANSIC>
          </Declarations>
        </TMthdItem>
      </GrupItem>
    </Children>
  </TInPEinvisibleGroup>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <!--This file was generated by Doxy2Component-->
</ListItem>
