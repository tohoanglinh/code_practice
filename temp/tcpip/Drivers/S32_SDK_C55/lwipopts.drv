%-      Copyright 2017 NXP
%-
%- ****************************************************************************
%- HEADER FILE START
%- ****************************************************************************
%INTERFACE
%define! DirRel_Code_rep %str_replace(DirRel_Code,"\","/")
%FILE %'DirRel_Code_rep'lwipopts.h
%include Common\Header.h

#ifndef LWIP_LWIPOPTS_H
#define LWIP_LWIPOPTS_H
/* FILE LWIPOPTS_H. */
%:SymbolCol  = 38
%:CommentCol = 66

/****************************************************************************
 * General: OS, Memory, etc.
 ****************************************************************************/
#define LWIP_NETIF_HOSTNAME          %>%'SymbolCol' 1
#define LWIP_NETIF_HOSTNAME_TEXT     %>%'SymbolCol' ("%'tcpipCfg_USE_HOST_NAME'")

#define TCPIP_MBOX_SIZE              %>%'SymbolCol' 10

#define DEFAULT_UDP_RECVMBOX_SIZE    %>%'SymbolCol' 10
#define DEFAULT_TCP_RECVMBOX_SIZE    %>%'SymbolCol' 10
#define DEFAULT_RAW_RECVMBOX_SIZE    %>%'SymbolCol' 10
#define DEFAULT_ACCEPTMBOX_SIZE      %>%'SymbolCol' 10

#define LWIP_NETIF_TX_SINGLE_PBUF    %>%'SymbolCol' 1
#define LWIP_SUPPORT_CUSTOM_PBUF     %>%'SymbolCol' 1
#define MEMP_USE_CUSTOM_POOLS        %>%'SymbolCol' 0
#define MEM_USE_POOLS                %>%'SymbolCol' 0

%>1%sdk_briefStart OS options of the module %sdk_commentEnd
#define NO_SYS                       %>%'SymbolCol' %get(tcpipCfg_FREERTOS,Value) %>%'CommentCol' /* 0: using OS with multi-thread --> use netconn API; 1: not using OS --> use Raw API */
#define LWIP_SOCKET                  %>%'SymbolCol' (NO_SYS==0)
#define LWIP_NETCONN                 %>%'SymbolCol' (NO_SYS==0)

%>1%sdk_briefStart RAW API options of the module %sdk_commentEnd
#define LWIP_RAW                     %>%'SymbolCol' 1

/** SYS_LIGHTWEIGHT_PROT
 * define SYS_LIGHTWEIGHT_PROT in lwipopts.h if you want inter-task protection
 * for certain critical regions during buffer allocation, deallocation and memory
 * allocation and deallocation.
 */
#define SYS_LIGHTWEIGHT_PROT         %>%'SymbolCol' (NO_SYS==0)

#define LWIP_SNMP                    %>%'SymbolCol' LWIP_UDP
#define MIB2_STATS                   %>%'SymbolCol' LWIP_SNMP
#define LWIP_DNS                     %>%'SymbolCol' LWIP_UDP
#define LWIP_MDNS_RESPONDER          %>%'SymbolCol' LWIP_UDP
#define LWIP_NUM_NETIF_CLIENT_DATA   %>%'SymbolCol' (LWIP_MDNS_RESPONDER)
#define LWIP_HAVE_LOOPIF             %>%'SymbolCol' 0
#define LWIP_NETIF_LOOPBACK          %>%'SymbolCol' 0
#define TCP_LISTEN_BACKLOG           %>%'SymbolCol' 1
#define LWIP_COMPAT_SOCKETS          %>%'SymbolCol' 1
#define LWIP_SO_RCVTIMEO             %>%'SymbolCol' 1
#define LWIP_SO_RCVBUF               %>%'SymbolCol' 1
#define LWIP_TCPIP_CORE_LOCKING      %>%'SymbolCol' 1
#define LWIP_NETIF_LINK_CALLBACK     %>%'SymbolCol' 0
#define LWIP_NETIF_STATUS_CALLBACK   %>%'SymbolCol' 0
#define LWIP_NETCONN_SEM_PER_THREAD  %>%'SymbolCol' 1
#define LWIP_SOCKET_SET_ERRNO        %>%'SymbolCol' 1

%>1%sdk_briefStart Memory options of the module %sdk_commentEnd
/* MEM_ALIGNMENT: should be set to the alignment of the CPU for which
   lwIP is compiled. 4 byte alignment -> define MEM_ALIGNMENT to 4, 2
   byte alignment -> define MEM_ALIGNMENT to 2. */
#define MEM_ALIGNMENT                %>%'SymbolCol' %'tcpipCfg_MEM_ALIGNMENT'

/* MEM_SIZE: the size of the heap memory. If the application will send
a lot of data that needs to be copied, this should be set high. */
#define MEM_SIZE                     %>%'SymbolCol' %'tcpipCfg_MEM_SIZE'

/* MEMP_NUM_PBUF: the number of memp struct pbufs. If the application
   sends a lot of data out of ROM (or other static memory), this
   should be set high. */
#define MEMP_NUM_PBUF                %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_PBUF'
/* MEMP_NUM_RAW_PCB: the number of UDP protocol control blocks. One
   per active RAW "connection". */
#define MEMP_NUM_RAW_PCB             %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_RAW_PCB'
/* MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
   per active UDP "connection". */
#define MEMP_NUM_UDP_PCB             %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_UDP_PCB'
/* MEMP_NUM_TCP_PCB: the number of simultaneously active TCP
   connections. */
#define MEMP_NUM_TCP_PCB             %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_TCP_PCB'
/* MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP
   connections. */
#define MEMP_NUM_TCP_PCB_LISTEN      %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_TCP_PCB_LISTEN'
/* MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP
   segments. */
#define MEMP_NUM_TCP_SEG             %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_TCP_SEG'
/* MEMP_NUM_SYS_TIMEOUT: the number of simultaneously active
   timeouts. */
#define MEMP_NUM_SYS_TIMEOUT         %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_SYS_TIMEOUT'

/* The following four are used only with the sequential API and can be
   set to 0 if the application only will use the raw API. */
/* MEMP_NUM_NETBUF: the number of struct netbufs. */
#define MEMP_NUM_NETBUF              %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_NETBUF'
/* MEMP_NUM_NETCONN: the number of struct netconns. */
#define MEMP_NUM_NETCONN             %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_NETCONN'
/* MEMP_NUM_TCPIP_MSG_*: the number of struct tcpip_msg, which is used
   for sequential API communication and incoming packets. Used in
   src/api/tcpip.c. */
#define MEMP_NUM_TCPIP_MSG_API       %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_TCPIP_MSG_API'
#define MEMP_NUM_TCPIP_MSG_INPKT     %>%'SymbolCol' %'tcpipCfg_MEMP_NUM_TCPIP_MSG_INPKT'

#define PBUF_POOL_SIZE               %>%'SymbolCol' %'tcpipCfg_PBUF_POOL_SIZE'          %>%'CommentCol' /* The number of buffers in the pbuf pool. */

/****************************************************************************
 * Data Link Layer
 ****************************************************************************/
%>1%sdk_briefStart MAC address of the module %sdk_commentEnd
#define LWIP_MAC_ADDR_BASE            %>%'SymbolCol' 0x%str_replace(tcpipCfg_MAC,":",",0x")

%>1%sdk_briefStart ARP options %sdk_commentEnd
%if %get(tcpipCfg_ARP,Value) == 'yes'
#define LWIP_ARP                      %>%'SymbolCol' 1                                 %>%'CommentCol' /* 1: Enable ARP, 0: Disable ARP */
%else
#define LWIP_ARP                      %>%'SymbolCol' 0                                 %>%'CommentCol' /* 1: Enable ARP, 0: Disable ARP */
%endif
#define ARP_TABLE_SIZE                %>%'SymbolCol' %'tcpipCfg_ARP_TABLE_SIZE'        %>%'CommentCol' /* ARP Table size */
#define ARP_QUEUEING                  %>%'SymbolCol' %'tcpipCfg_ARP_QUEUEING'          %>%'CommentCol' /* ARP Queueing */

/****************************************************************************
 * IP Network Layer
 ****************************************************************************/
%>1%sdk_briefStart IPv4 options of the module %sdk_commentEnd
%if %get(tcpipCfg_IPV4,Value) == 'yes'
#define LWIP_IPV4                     %>%'SymbolCol' 1                                    %>%'CommentCol' /* 1: Enable IPv4, 0: Disable IPv4 */
%else
#define LWIP_IPV4                     %>%'SymbolCol' 0                                    %>%'CommentCol' /* 1: Enable IPv4, 0: Disable IPv4 */
%endif

%>1%sdk_briefStart Dynamic IP address settings of the module %sdk_commentEnd
#define LWIP_DHCP                     %>%'SymbolCol' %EXPR(1~%get(tcpipCfg_DHCP,Value))   %>%'CommentCol' /* 1: Enable DHCP, 0: Disable DHCP */
#define DHCP_DOES_ARP_CHECK           %>%'SymbolCol' (LWIP_DHCP)                          %>%'CommentCol' /* 1: Do an ARP check on the offered address (recommended) */
#define LWIP_AUTOIP                   %>%'SymbolCol' %EXPR(1~%get(tcpipCfg_AUTOIP,Value)) %>%'CommentCol' /* 1: Enable AUTOIP, 0: Disable AUTOIP */
#define LWIP_DHCP_AUTOIP_COOP         %>%'SymbolCol' (LWIP_DHCP && LWIP_AUTOIP)           %>%'CommentCol' /* AUTOIP and DHCP Cooperation */
#define LWIP_DHCP_AUTOIP_COOP_TRIES   %>%'SymbolCol' %'tcpipCfg_DHCP_AUTOIP_COOP_TRIES'   %>%'CommentCol' /* Number of DHCP Discover tries before switching to
                                                                                          %>%'CommentCol'    AUTOIP. Set it to a low value will get a IP quickly.
                                                                                          %>%'CommentCol'    But you should prepare to handle changing
                                                                                          %>%'CommentCol'    IP address when DHCP overrides AUTOIP */

%>1%sdk_briefStart Static IP address settings of the module %sdk_commentEnd
#define LWIP_PORT_INIT_IPADDR(addr)   %>%'SymbolCol' IP4_ADDR((addr), %str_replace(tcpipCfg_IPV4ADDR,".",","))
#define LWIP_PORT_INIT_NETMASK(addr)  %>%'SymbolCol' IP4_ADDR((addr), %str_replace(tcpipCfg_IPV4SUBNETMASK,".",","))
#define LWIP_PORT_INIT_GW(addr)       %>%'SymbolCol' IP4_ADDR((addr), %str_replace(tcpipCfg_IPV4GW,".",","))

%>1%sdk_briefStart IP forward ability of the module %sdk_commentEnd
#define IP_FORWARD                   %>%'SymbolCol' 0                                   %>%'CommentCol' /* 1: Forward IP packets across network interfaces,
                                                                                        %>%'CommentCol'    0: Run lwIP on a device with only 1 network interface */

%>1%sdk_briefStart IP reassembly and segmentation. These are orthogonal even if they both deal with IP fragments %sdk_commentEnd
#define IP_REASSEMBLY                %>%'SymbolCol' 1
#define IP_REASS_MAX_PBUFS           %>%'SymbolCol' 10
#define MEMP_NUM_REASSDATA           %>%'SymbolCol' 10
#define IP_FRAG                      %>%'SymbolCol' 1

%>1%sdk_briefStart ICMP options of the module %sdk_commentEnd
%if %get(tcpipCfg_ICMP,Value) == 'yes'
    %if %get(tcpipCfg_IPV4,Value) == 'no'
        %error ICMP requires IPv4 to work. (Properties >> IP Network >> IPv4 Support)
    %else
#define LWIP_ICMP                    %>%'SymbolCol' 1
    %endif
%else
#define LWIP_ICMP                    %>%'SymbolCol' 0
%endif
#define ICMP_TTL                     %>%'SymbolCol' %'tcpipCfg_ICMP_TTL'                %>%'CommentCol' /* ICMP Time to live value */

%>1%sdk_briefStart IGMP options of the module %sdk_commentEnd
%if %get(tcpipCfg_IGMP,Value) == 'yes'
    %if %get(tcpipCfg_IPV4,Value) == 'no'
        %error IGMP requires IPv4 to work. (Properties >> IP Network >> IPv4 Support)
    %else
#define LWIP_IGMP                    %>%'SymbolCol' 1
    %endif
%else
#define LWIP_IGMP                    %>%'SymbolCol' 0
%endif

%>1%sdk_briefStart IPv6 options of the module %sdk_commentEnd
%if %get(tcpipCfg_IPV6,Value) == 'yes'
#define LWIP_IPV6                     %>%'SymbolCol' 1                                    %>%'CommentCol' /* 1: Enable IPv6, 0: Disable IPv6 */
%else
#define LWIP_IPV6                     %>%'SymbolCol' 0                                    %>%'CommentCol' /* 1: Enable IPv6, 0: Disable IPv6 */
%endif

/****************************************************************************
 * Transport Layer
 ****************************************************************************/
%>1%sdk_briefStart TCP options of the module %sdk_commentEnd
%if %get(tcpipCfg_TCP,Value) == 'yes'
#define LWIP_TCP                     %>%'SymbolCol' 1                                   %>%'CommentCol' /* 1: Enable TCP, 0: Disable TCP */
%else
#define LWIP_TCP                     %>%'SymbolCol' 0                                   %>%'CommentCol' /* 1: Enable TCP, 0: Disable TCP */
%endif
#define TCP_TTL                      %>%'SymbolCol' %'tcpipCfg_TCP_TTL'                 %>%'CommentCol' /* TCP Time to live value */
#define TCP_QUEUE_OOSEQ              %>%'SymbolCol' %'tcpipCfg_TCP_QUEUE_OOSEQ'         %>%'CommentCol' /* Controls if TCP should queue segments that arrive out of order.
                                                                                        %>%'CommentCol'    Defines to 0 if your device is low on memory. */
#define TCP_MSS                      %>%'SymbolCol' %'tcpipCfg_TCP_MSS'                 %>%'CommentCol' /* TCP Maximum segment size */
#define TCP_SND_BUF                  %>%'SymbolCol' %'tcpipCfg_TCP_SND_BUF'             %>%'CommentCol' /* TCP sender buffer space (bytes). */

/* TCP sender buffer space (pbufs). This must be at least = 2 *
   TCP_SND_BUF/TCP_MSS for things to work. */
#define TCP_SND_QUEUELEN             %>%'SymbolCol' (4 * TCP_SND_BUF/TCP_MSS)

/* TCP writable space (bytes). This must be less than or equal
   to TCP_SND_BUF. It is the amount of space which must be
   available in the tcp snd_buf for select to return writable */
#define TCP_SNDLOWAT                 %>%'SymbolCol' (TCP_SND_BUF/2)

#define TCP_WND                      %>%'SymbolCol' %'tcpipCfg_TCP_WND'                 %>%'CommentCol' /* TCP receive window. */
#define TCP_MAXRTX                   %>%'SymbolCol' %'tcpipCfg_TCP_MAXRTX'              %>%'CommentCol' /* Maximum number of retransmissions of data segments. */
#define TCP_SYNMAXRTX                %>%'SymbolCol' %'tcpipCfg_TCP_SYNMAXRTX'           %>%'CommentCol' /* Maximum number of retransmissions of SYN segments. */

%>1%sdk_briefStart UDP options of the module %sdk_commentEnd
%if %get(tcpipCfg_UDP,Value) == 'yes'
#define LWIP_UDP                     %>%'SymbolCol' 1                                   %>%'CommentCol' /* 1: Enable UDP, 0: Disable UDP */
%else
#define LWIP_UDP                     %>%'SymbolCol' 0                                   %>%'CommentCol' /* 1: Enable UDP, 0: Disable UDP */
%endif
#define LWIP_UDPLITE                 %>%'SymbolCol' (LWIP_UDP)
#define UDP_TTL                      %>%'SymbolCol' %'tcpipCfg_UDP_TTL'                 %>%'CommentCol' /* UDP Time to live value. */

/****************************************************************************
 * Debug, Statistics, PPP, Checksum
 ****************************************************************************/
%>1%sdk_briefStart Debugging options of the module %sdk_commentEnd
#ifdef LWIP_DEBUG
#define LWIP_DBG_MIN_LEVEL           %>%'SymbolCol' 0
#define PPP_DEBUG                    %>%'SymbolCol' LWIP_DBG_OFF
#define MEM_DEBUG                    %>%'SymbolCol' LWIP_DBG_OFF
#define MEMP_DEBUG                   %>%'SymbolCol' LWIP_DBG_OFF
#define PBUF_DEBUG                   %>%'SymbolCol' LWIP_DBG_OFF
#define API_LIB_DEBUG                %>%'SymbolCol' LWIP_DBG_OFF
#define API_MSG_DEBUG                %>%'SymbolCol' LWIP_DBG_OFF
#define TCPIP_DEBUG                  %>%'SymbolCol' LWIP_DBG_OFF
#define NETIF_DEBUG                  %>%'SymbolCol' LWIP_DBG_OFF
#define SOCKETS_DEBUG                %>%'SymbolCol' LWIP_DBG_OFF
#define DNS_DEBUG                    %>%'SymbolCol' LWIP_DBG_OFF
#define AUTOIP_DEBUG                 %>%'SymbolCol' LWIP_DBG_OFF
#define DHCP_DEBUG                   %>%'SymbolCol' LWIP_DBG_OFF
#define IP_DEBUG                     %>%'SymbolCol' LWIP_DBG_OFF
#define IP_REASS_DEBUG               %>%'SymbolCol' LWIP_DBG_OFF
#define ICMP_DEBUG                   %>%'SymbolCol' LWIP_DBG_OFF
#define IGMP_DEBUG                   %>%'SymbolCol' LWIP_DBG_OFF
#define UDP_DEBUG                    %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_DEBUG                    %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_INPUT_DEBUG              %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_OUTPUT_DEBUG             %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_RTO_DEBUG                %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_CWND_DEBUG               %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_WND_DEBUG                %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_FR_DEBUG                 %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_QLEN_DEBUG               %>%'SymbolCol' LWIP_DBG_OFF
#define TCP_RST_DEBUG                %>%'SymbolCol' LWIP_DBG_OFF
#endif

#define LWIP_DBG_TYPES_ON            %>%'SymbolCol' (LWIP_DBG_ON|LWIP_DBG_TRACE|LWIP_DBG_STATE|LWIP_DBG_FRESH|LWIP_DBG_HALT)

%>1%sdk_briefStart Statistics options of the module %sdk_commentEnd
#define LWIP_STATS                   %>%'SymbolCol' 1 %>%'CommentCol' /* 1: collect statistics; 0: not collect statistics */
#define LWIP_STATS_DISPLAY           %>%'SymbolCol' 0

#if LWIP_STATS
#define LINK_STATS                   %>%'SymbolCol' 1
#define IP_STATS                     %>%'SymbolCol' 1
#define ICMP_STATS                   %>%'SymbolCol' 1
#define IGMP_STATS                   %>%'SymbolCol' 1
#define IPFRAG_STATS                 %>%'SymbolCol' 1
#define UDP_STATS                    %>%'SymbolCol' 1
#define TCP_STATS                    %>%'SymbolCol' 1
#define MEM_STATS                    %>%'SymbolCol' 1
#define MEMP_STATS                   %>%'SymbolCol' 1
#define PBUF_STATS                   %>%'SymbolCol' 1
#define SYS_STATS                    %>%'SymbolCol' 1
#endif /* LWIP_STATS */

%>1%sdk_briefStart PPP options of the module %sdk_commentEnd
#define PPP_SUPPORT                  %>%'SymbolCol' 0

%>1%sdk_briefStart Checksum options of the module %sdk_commentEnd
#define LWIP_CHECKSUM_CTRL_PER_NETIF %>%'SymbolCol' 0
#define CHECKSUM_GEN_IP              %>%'SymbolCol' 0
#define CHECKSUM_GEN_UDP             %>%'SymbolCol' 0
#define CHECKSUM_GEN_TCP             %>%'SymbolCol' 0
#define CHECKSUM_GEN_ICMP            %>%'SymbolCol' 0
#define CHECKSUM_GEN_ICMP6           %>%'SymbolCol' LWIP_IPV6
#define CHECKSUM_CHECK_IP            %>%'SymbolCol' 0
#define CHECKSUM_CHECK_UDP           %>%'SymbolCol' 0
#define CHECKSUM_CHECK_TCP           %>%'SymbolCol' 0
#define CHECKSUM_CHECK_ICMP          %>%'SymbolCol' 0
#define CHECKSUM_CHECK_ICMP6         %>%'SymbolCol' LWIP_IPV6
#define LWIP_CHECKSUM_ON_COPY        %>%'SymbolCol' 0

#endif /* ifndef LWIP_LWIPOPTS_H */
%include Common\Header.end
%- ****************************************************************************
%- HEADER FILE END
%- ****************************************************************************